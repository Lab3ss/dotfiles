" ############################################################################
" ############################## GENERAL #####################################
" ############################################################################

set encoding=utf-8 " needed for devicons

let mapleader = "\<space>"

set nocompatible                 " Not Vi Compatible

set mouse=a                      " Enable mouse support for all modes

                                 " #### FILE TYPE ###
                                 "
filetype on                      " Detect type of file that is edited
filetype plugin on               " Load specific file type plugin
filetype indent on               " Load specific file type indent plugin

set hidden                       " Hidde buffer instead of unload on closing window

                                 " ### SPECIAL CHARACTERS ###
                                 "
set expandtab                    " Converting tabs to spaces. Essential in Python
set backspace=2                  " Allow backspacing (or Ctrl-W/Ctrl-U) in insert mode over all

                                 " ### INDENTATION ###
                                 "
set autoindent                   " Respect indentation when starting a new line
set smartindent                  " Auto add indent level
set tabstop=2                    " Number of spaces Tab is counted for
set shiftwidth=2                 " Number of spaces to use for autoindent
set nowrap                       " display one line on one line

set foldmethod=syntax            " Define folds using syntax
let javaScript_fold=1
set foldlevelstart=99

                                 " ### SWAP & BACKUP ###
                                 "
set noswapfile                   " Disable buffer's swapfiles
set nobackup                     " Disable persistant backups
set writebackup                  " Create a temporary backup before overweritting a file

                                 " ### SEARCH ###
                                 "
set smartcase                    " Ignore case on search if pattern contains upper case char
set path=,,                      " Only use working directory scope on searching for anything
                                 "                  
                                 " Ignore some files on searching
                                 " wig = wildignore
                                 "
set wig+=*/node_modules/*        " Linux/MaxOSX 
set wig+=*/dist/*                "
set wig+=*.so,*.swp,*.zip        "
set wig+=*\\node_modules\\*      " Windows
set wig+=*\\dist\\*              "
set wig+=*.swp,*.zip,*.exe       "

                                 " ### COMMAND MODE ###
                                 "
set history=1000                 " Number of ':' commands and search patterns to remember
set wildmenu                     " Command-line completion menu

                                 " ### NAVIGATION ###
                                 "
set scrolloff=999                " Center window around cursor Y
set sidescrolloff=999            " Cenrer window around cursor X

                                 " ### DISPLAY ###
                                 "
set noshowcmd                    " Hide partial commands on last line
set laststatus=2                 " Always hide status bar
set noruler                      " Hide cursor pos
set number                       " Display current line number
set relativenumber               " Display other lines number relative to current line
set cursorline
syntax enable                    " Enable syntax highlighting keeping current colors settings

" ############################################################################
" ################################ TODO ######################################
" ############################################################################

set statusline=\ %t             " @TODO: find a plugin to handle status line.
" set noshowmode                   " Do not display current mode in status line

" ############################################################################
" ############################### PLUGINS ####################################
" ############################################################################

call plug#begin()

" Color schemes list
" Plug 'flazz/vim-colorschemes'

" Autocomplete snippet
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Search engine
Plug 'dyng/ctrlsf.vim'

" Linter
Plug 'dense-analysis/ale'

" File explorer
Plug 'preservim/nerdtree'

" File finder
Plug 'ctrlpvim/ctrlp.vim'

" Git diff in sign column
" Plug 'airblade/vim-gitgutter'

" Global JS Syntax highlighting and indentation
Plug 'pangloss/vim-javascript'

" TS Syntax (based on vim-javascript) + compiler
Plug 'leafgarland/typescript-vim'

" JSX Syntax
Plug 'maxmellon/vim-jsx-pretty'

" GraphQL queries syntax
Plug 'jparise/vim-graphql'

" Plug 'moll/vim-node'

Plug 'f-person/git-blame.nvim'

Plug 'ryanoasis/vim-devicons'

" Plug 'wahidrahim/resize-font'

" Plug 'lambdalisue/vim-fullscreen'

Plug 'junegunn/goyo.vim'

" Plug 'junegunn/limelight.vim'

" TODO : check1 vim-unimpaired
"
call plug#end()

colorscheme peachpuff                    " Select color scheme 

" hi Normal ctermbg=NONE guibg=NONE
" hi TabLine guibg=NONE ctermbg=NONE ctermfg=239
" hi TabLineSel  guibg=NONE gui=bold ctermfg=250 ctermbg=NONE cterm=bold
" hi TabLineFill guibg=NONE ctermbg=NONE ctermfg=NONE guifg=NONE cterm=NONE gui=NONE
" hi LineNr guibg=NONE ctermbg=NONE
" hi CursorLine guibg=NONE ctermbg=NONE gui=bold cterm=bold
" hi CursorLineNr guibg=NONE ctermbg=NONE gui=bold cterm=bold
" hi Visual guibg=#4a5264 guifg=none ctermbg=238 ctermfg=NONE
" hi VertSplit guibg=NONE ctermbg=NONE
" highlight SignColumn ctermbg=NONE
" highlight GitGutterAdd    guifg=NONE ctermfg=2
" highlight GitGutterChange guifg=NONE ctermfg=3
" highlight GitGutterDelete guifg=NONE ctermfg=1

                                      " ### NERDTREE ###
let g:netrw_liststyle = 3             " Display files as a tree
let g:netrw_browse_split = 3          " <cr> open file in a new tab 
let g:netrw_winsize = 20              " Window with in percents

                                      " ### CTRL-P ###
let g:ctrlp_working_path_mode = 'r'   " Search in project
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]node_modules$',
	\ 'file': '\v\.(exe|so|dll)$',
	\ }

                                      " ### GOYO ###"
let g:goyo_width = 100
let g:goyo_height = '90%'

let g:ale_fixers = ['prettier', 'eslint']

" CoC extensions
let g:coc_global_extensions = ['coc-tsserver']

let g:gitblame_enabled = 0

" ############################################################################
" ############################## MAPPING #####################################
" ############################################################################

nmap     <leader>9 f(lci(
nmap     <leader>[ f[lci[
nmap     <leader>{ f{lci{
nmap     <leader>' f'lci'
nmap     <leader>" f"lci"
nmap     <leader>` f`lci`
nmap     <leader>l iconsole.log(
nmap     <leader>z zA
nmap     <leader>g :GitBlameToggle<CR>

nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
nmap     <C-Space> :NERDTreeToggle<CR>
" nmap     <C-G> :Goyo<CR>
nmap     <C-G>b :GitBlameToggle<CR>
nmap     <C-H> :bprev<CR>
nmap     <C-L> :bnext<CR>
nmap <C-[> <Plug>(ale_previous_wrap)
nmap <C-]> <Plug>(ale_next_wrap)
nmap <leader>p :ALEFix<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <C-Q> :bd<CR>

" map <F11> :ResizeFontSmaller<CR>
" map <F12> :ResizeFontBigger<CR>

hi Normal guibg=none ctermbg=none
hi TabLine cterm=none ctermbg=none ctermfg=0
hi TabLineSel ctermfg=1 ctermbg=none cterm=bold
hi TabLineFill ctermfg=0 ctermbg=none cterm=none
hi CursorLine cterm=bold ctermbg=7  ctermfg=none
hi Visual cterm=none ctermfg=none ctermbg=0
hi StatusLine cterm=none ctermbg=none ctermfg=none
hi StatusLineNC cterm=none ctermbg=none ctermfg=none
hi Search cterm=none ctermbg=0 ctermfg=none
hi VertSplit cterm=none ctermbg=none ctermfg=0
hi LineNr ctermfg=0 ctermbg=none cterm=none
hi CursorLineNr ctermfg=1 ctermbg=none cterm=none
hi Comment cterm=italic
hi SignColumn cterm=none ctermbg=none
hi MatchParen cterm=bold ctermbg=0 ctermfg=none
hi Folded cterm=bold ctermbg=0 ctermfg=none
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign
highlight ALEWarning cterm=underline ctermbg=none
highlight ALEError cterm=underline ctermbg=none

"let g:ale_set_highlights = 0
"let g:ale_exclude_highlights = 1
"
" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif
au BufEnter * setlocal cursorline
au BufLeave * setlocal nocursorline
